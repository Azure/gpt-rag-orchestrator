from shared.util import get_secret
# from semantic_kernel.skill_definition import sk_function
from semantic_kernel.functions import kernel_function
import logging
import os
import aiohttp
import sys
from typing import Dict
if sys.version_info >= (3, 9):
    from typing import Annotated
else:
    from typing_extensions import Annotated

SECURITY_HUB_ENDPOINT = os.environ["SECURITY_HUB_ENDPOINT"]
class Security:
    @kernel_function(
        description="Check security of question and answer generated.",
        name="SecurityCheck",
    )
    async def SecurityCheck(
        self,
        question: Annotated[str, "The user question"],
        answer: Annotated[str, "The answer generated by the model"],
        sources: Annotated[str, "The sources to search for the answer"],
    ) -> Annotated[bool, "Passed security checks"]:
        security_hub_endpoint=SECURITY_HUB_ENDPOINT
        try:
            security_hub_key = await get_secret("securityHubKey")
            async with aiohttp.ClientSession() as session:
        # Make a POST request using the session.post() method
             async with session.post(
                security_hub_endpoint,
                json={"question": question, "answer": answer, "sources": sources},
                headers={"x-functions-key": security_hub_key}
            ) as request:
                if request.status != 200:
                    text=await request.text()
                    logging.error(f"Error requesting security hub: {text}")
                    return {"status": "error", "details": text}
                result = await request.json()
                return {"status": "success", "details": result["details"],"successful":result["successful"]}
        except Exception as e:
            logging.error(f"Error requesting security hub: {str(e)}")
            return {"status": "error", "details": str(e)}
        
        
        